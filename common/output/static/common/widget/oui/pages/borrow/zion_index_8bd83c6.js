// Generated by CoffeeScript 1.8.0
(function() {
  define('common:widget/oui/pages/borrow/zion_index', ['require', 'exports', 'module', 'common:widget/oui/lib/jquery/1.9.1/jquery', 'common:widget/oui/lib/handlebars/1.0.0/handlebars'],function(require, exports, module) {
    var $, CACHE, Dict, Handlebars, RateDict, Silder, Step, UserLevel, init;
    $ = require('common:widget/oui/lib/jquery/1.9.1/jquery');
    Handlebars = require('common:widget/oui/lib/handlebars/1.0.0/handlebars');
    UserLevel = window['userFeeRate'] || 'HR';
    RateDict = window['allFeeRate'] || {};
    CACHE = {};
    Dict = {
      0: 3000,
      126: 10000,
      444: 10 * 10000,
      622: 20 * 10000,
      728: 50 * 10000
    };
    Silder = {
      def: {
        offset: 55,
        minoffset: 0,
        maxoffset: 728,
        min: 3000,
        max: 500000,
        step: 1000,
        delay: 200,
        text: '#J_text_borrow-amount',
        holder: '#J_borrow-amount-slider',
        line: '#J_borrow-slider-line',
        trigger: '#J_borrow-slider-trigger',
        up: '#J_borrow-slider-right',
        down: '#J_borrow-slider-left'
      },
      increaseVal: function() {
        var me, opt, val;
        me = this;
        opt = me.option;
        val = opt.text.val() - 0;
        val = me.sanitizeVal(val + opt.step);
        me.setVal(val);
        return me.money2silder();
      },
      decreaseVal: function() {
        var me, opt, val;
        me = this;
        opt = me.option;
        val = opt.text.val() - 0;
        val = me.sanitizeVal(val - opt.step);
        me.setVal(val);
        return me.money2silder();
      },
      sanitizeVal: function(val) {
        var max, me, min, opt, originVal, step;
        me = this;
        opt = me.option;
        originVal = val;
        min = opt.min;
        max = opt.max;
        val = parseInt('0' + val, 10);
        if (val < min) {
          val = min;
        }
        if (val > max) {
          val = max;
        }
        if (val <= 10000) {
          opt.step = 1000;
        }
        if (val > 10000) {
          opt.step = 5000;
        }
        if (val > 10 * 10000) {
          opt.step = 10000;
        }
        if (val > 20 * 10000) {
          opt.step = 50000;
        }
        step = opt.step;
        if ((val % step) !== 0) {
          val = (val - (val % step)) + step;
        }
        return val;
      },
      setVal: function(val) {
        var me;
        me = this;
        return me.option.text.val(val);
      },
      setOffset: function(val) {
        var max, me, min, offset, offsetTrigger, opt, x;
        me = this;
        opt = me.option;
        offset = opt.offset;
        offsetTrigger = 36;
        max = opt.maxoffset;
        min = opt.minoffset;
        x = parseInt('0' + val, 10);
        x = x - offset;
        if (x > max) {
          x = max;
        }
        if (x < min) {
          x = min;
        }
        opt.line.css({
          width: x
        });
        return opt.trigger.css({
          left: x + offsetTrigger
        });
      },
      silder2money: function(x) {
        var dict, k, last, max, me, min, next, offset, opt, unit, v, val;
        me = this;
        opt = me.option;
        offset = opt.offset;
        max = opt.maxoffset;
        min = opt.minoffset;
        x = x - offset;
        if (x > max) {
          x = max;
        }
        if (x < min) {
          x = min;
        }
        last = opt.min;
        next = opt.max;
        dict = Dict;
        if (x === min) {
          me.setVal(me.sanitizeVal(opt.min));
        }
        if (x === max) {
          me.setVal(me.sanitizeVal(opt.max));
        }
        for (k in dict) {
          v = dict[k];
          if (x >= k) {
            last = k;
          }
          if (x <= k) {
            next = k;
            break;
          }
        }
        if (next === last) {
          me.setVal(me.sanitizeVal(dict[next]));
          me.renderTable();
          return me;
        }
        unit = (dict[next] - dict[last]) / (next - last);
        val = (x - last) * unit + dict[last];
        me.setVal(me.sanitizeVal(val));
        me.renderTable();
        return me;
      },
      money2silder: function(resetval) {
        var dict, k, max, me, min, offset, opt, unit, v, val, x;
        me = this;
        opt = me.option;
        offset = opt.offset;
        min = opt.minoffset;
        max = opt.maxoffset;
        dict = Dict;
        val = parseInt('0' + opt.text.val(), 10);
        if (resetval) {
          if ((val % 100) !== 0) {
            val = Math.ceil(val / 100) * 100;
          }
          if (val < opt.min) {
            val = 3000;
          }
          if (val > opt.max) {
            val = 500000;
          }
          me.setVal(val);
        }
        val = me.sanitizeVal(opt.text.val());
        for (k in dict) {
          v = dict[k];
          if (val > v) {
            min = k;
          }
          if (val <= v) {
            max = k;
            break;
          }
        }
        unit = (dict[max] - dict[min]) / (max - min);
        x = min;
        x = x - 0 + (val - dict[min]) / unit;
        x += offset;
        me.setOffset(x);
        return me.renderTable();
      },
      renderTable: function() {
        var calcMonth, calcTotal, dict, holder, k, key, me, month, opt, payment, ret, tip_content, tip_tigger, tpl, tr, v, _discount, _hasDiscount, _i, _len, _ref;
        key = 'J_borrow-table-tr';
        me = this;
        opt = me.option;
        holder = opt.table;
        dict = RateDict;
        tip_tigger = $('.icon-cash', holder.parent('table'));
        tip_content = $('.ui-poptip-content', '#J_borrow-month-fee-rate');
        payment = parseInt('0' + $('#J_text_borrow-amount').val(), 10);
        ret = {};
        calcMonth = function(month, rate) {
          var pay;
          pay = payment * 100;
          pay = parseInt(Math.round(pay / month + payment * rate), 10) / 100;
          return pay.toFixed(2);
        };
        calcTotal = function(month, rate) {
          var pay;
          pay = calcMonth(month, rate);
          pay = (pay * 100 * month) / 100;
          return pay.toFixed(2);
        };
        if (CACHE[key]) {
          tpl = CACHE[key];
        } else {
          tpl = CACHE[key] = Handlebars.compile($('#' + key).html());
        }
        month = $(':radio:checked', holder).val();
        for (k in dict) {
          v = dict[k];
          if (k.indexOf(UserLevel + '_') !== -1) {
            ret[v.month] = v;
          }
        }
        holder.html('');
        _hasDiscount = false;
        _discount = 0;
        _ref = [3, 6, 12, 24];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          k = _ref[_i];
          v = ret[k];
          if (!v) {
            continue;
          }
          if (v.discountRadio < 100) {
            v.hasDiscount = _hasDiscount = true;
          } else {
            v.hasDiscount = _hasDiscount = false;
          }
          v.monthFeeRate = v.finalMonthlyComprehensiveFeeRate;
          v.payment = payment;
          v.monthPay = calcMonth(v.month, v.monthFeeRate);
          v.totalPay = calcTotal(v.month, v.monthFeeRate);
          v.monthFeeRate = v.monthFeeRate.toFixed(2);
          tr = tpl(v);
          _discount = v.monthlyComprehensiveFeeRate;
          holder.append(tr);
        }
        if (_hasDiscount) {
          tip_content.html(['借款费率大优惠。原始月综合费率为', _discount, '%。'].join(''));
          return tip_tigger.removeClass('fn-hide');
        } else {
          return tip_tigger.addClass('fn-hide');
        }
      },
      _bindClickAndHold: function(el, callbak, delay) {
        var holdHandler, holdTimer;
        holdTimer = null;
        holdHandler = function() {
          return holdTimer = setTimeout(function() {
            callbak();
            return holdHandler();
          }, delay);
        };
        return el.on('mousedown', function() {
          holdHandler();
          return false;
        }).on('mouseup mouseout', function() {
          clearTimeout(holdTimer);
          return false;
        }).on('click dbclick', function(e) {
          callbak();
          return false;
        });
      },
      _bindWheelEvent: function() {
        var isWheel, me, opt;
        me = this;
        opt = me.option;
        return isWheel = 0;
      },
      _bindTableEvent: function() {
        var me, opt, table;
        me = this;
        opt = me.option;
        table = opt.table = $('#J_borrow-table');
        return table.on('click', 'tr', function(e) {
          $(':radio', this).get(0).checked = true;
          return $(this).addClass('active').siblings().removeClass('active');
        }).on('mouseenter', 'tr', function() {
          return $(this).addClass('active');
        }).on('mouseleave', 'tr', function() {
          if (!$(':radio', this).get(0).checked) {
            return $(this).removeClass('active');
          }
        });
      },
      _bindDragEvent: function() {
        var holder, isDrag, line, me, moveingHander, opt, trigger;
        me = this;
        opt = me.option;
        holder = opt.holder;
        trigger = opt.trigger;
        line = opt.line;
        isDrag = 0;
        moveingHander = function(e) {
          var x;
          if (!isDrag) {
            return;
          }
          x = e.pageX - holder.offset().left;
          me.setOffset(x);
          return me.silder2money(x);
        };
        trigger.on('mousedown', function(e) {
          isDrag = 1;
          return false;
        }).on('mouseup mouseout', function(e) {
          isDrag = 0;
          return false;
        });
        holder.on('mousedown', function(e) {
          var x;
          x = e.offsetX;
          me.setOffset(x);
          return me.silder2money(x);
        });
        return $(document).on('mousemove', moveingHander);
      },
      bindEvent: function() {
        var me, opt;
        me = this;
        opt = me.option;
        me._bindClickAndHold(opt.up, function() {
          return me.increaseVal();
        }, opt.delay);
        me._bindClickAndHold(opt.down, function() {
          return me.decreaseVal();
        }, opt.delay);
        me._bindDragEvent();
        me._bindWheelEvent();
        me._bindTableEvent();
        opt.text.on('keyup', function() {
          return me.money2silder();
        });
        opt.text.on('blur', function() {
          return me.money2silder(true);
        });
        return me;
      },
      init: function(opt) {
        var k, me, _i, _len, _ref;
        me = this;
        me.option = $.extend({}, me.def, opt);
        _ref = ['text', 'line', 'holder', 'trigger', 'up', 'down'];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          k = _ref[_i];
          me.option[k] = $(me.option[k]);
        }
        me.bindEvent();
        me.money2silder();
        return me;
      }
    };
    Step = {
      def: {
        idx: 0,
        trigger: '#J_borrow-step-trigger',
        holder: '#J_borrow-step-holder'
      },
      next: function() {
        var me, opt;
        me = this;
        opt = me.option;
        return me.switchTo(++opt.idx);
      },
      last: function() {
        var me, opt;
        me = this;
        opt = me.option;
        return me.switchTo(--opt.idx);
      },
      switchTo: function(idx) {
        var holder, len, me, opt, panels, trigger, triggers;
        me = this;
        opt = me.option;
        trigger = opt.trigger;
        triggers = $('li', trigger);
        len = triggers.length;
        holder = opt.holder;
        panels = $('div:lt(' + len + ')', opt.holder);
        if (idx >= len) {
          idx = len - 1;
        }
        if (idx <= 0) {
          idx = 0;
        }
        opt.idx = idx;
        triggers.removeClass('ui-step-active ui-step-pass').filter(':lt(' + idx + ')').addClass('ui-step-pass').end().eq(idx).addClass('ui-step-active');
        panels.addClass('hide').eq(idx).removeClass('hide');
        return me;
      },
      bindEvent: function() {
        var holder, me, opt, trigger;
        me = this;
        opt = me.option;
        trigger = opt.trigger;
        holder = opt.holder;
        trigger.on('click', 'li', function(e) {
          return me.switchTo($('li', trigger).index(this));
        });
        return holder.on('click', '.arrow-left', function() {
          return me.last();
        }).on('click', '.arrow-right', function() {
          return me.next();
        });
      },
      init: function(opt) {
        var k, me, _i, _len, _ref;
        me = this;
        me.option = $.extend({}, me.def, opt);
        _ref = ['trigger', 'holder'];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          k = _ref[_i];
          me.option[k] = $(me.option[k]);
        }
        me.bindEvent();
        return me;
      }
    };
    init = function() {
      Silder.init();
      return Step.init();
    };
    return module.exports = {
      init: init
    };
  });

}).call(this);
