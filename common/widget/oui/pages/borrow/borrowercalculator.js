// Generated by CoffeeScript 1.8.0
(function() {
  define(function(require, exports, module) {
    var $, CACHE, Calc, Calculator, Components, Dict, Form, Handlebars, Levels, Month, Rate, StartRate, UserLevel, Widgets, YearRate, init;
    $ = require('jquery');
    Widgets = require('widgets/widgets');
    Handlebars = require('handlebars');
    Components = require('components/components');
    Calculator = Components.Calculator;
    Form = Widgets.Form;
    Dict = window['allFeeRate'] || {};
    CACHE = {};
    Rate = 0.88;
    StartRate = 5;
    YearRate = 0;
    UserLevel = 'HR';
    Month = 3;
    Levels = 'AA A B C D E HR';
    Calc = {
      hide: function(x) {
        return $(x).addClass('hide');
      },
      show: function(x) {
        return $(x).removeClass('hide');
      },
      formatMoney: function(num, n) {
        var re;
        if (!n) {
          n = 0;
        }
        num = String(Number(num).toFixed(n));
        re = /(-?\d+)(\d{3})/;
        while (re.test(num)) {
          num = num.replace(re, '$1,$2');
        }
        return num;
      },
      renderResult: function(d) {
        var data, holder, key, me, tpl;
        me = this;
        key = 'J_tpl-loan-calc';
        if (CACHE[key]) {
          tpl = CACHE[key];
        } else {
          tpl = CACHE[key] = Handlebars.compile($('#' + key).html());
        }
        holder = $('#J_calcResult');
        data = $.extend({}, {
          monthPay: 0,
          monthRate: 0,
          totalPay: 0,
          startPay: 0,
          isShowTable: false,
          table: []
        }, d);
        return holder.html(tpl(data));
      },
      calc: function() {
        var amount, calcMonth, calcTotal, data, k, maintenanceFee, me, month, monthPay, payment, rate, res, startRate, totalPay, v, _ref;
        me = this;
        amount = $('#J_borrowAmount').val();
        month = $('#J_repayTime').val();
        amount = parseInt('0' + amount, 10);
        month = parseInt('0' + month, 10);
        rate = Rate;
        startRate = StartRate;
        payment = amount;
        calcMonth = function(month, rate) {
          var pay;
          pay = payment * 100;
          pay = parseInt(Math.round(pay / month + payment * rate), 10) / 100;
          return pay.toFixed(2);
        };
        calcTotal = function(month, rate) {
          var pay;
          pay = payment * 100;
          pay = parseInt(Math.round(pay + payment * rate * month), 10) / 100;
          return pay.toFixed(2);
        };
        monthPay = calcMonth(month, rate);
        totalPay = monthPay * month;
        data = {
          monthRate: rate,
          startPay: me.formatMoney(amount * startRate / 100, 2),
          monthPay: me.formatMoney(monthPay, 2),
          totalPay: me.formatMoney(totalPay, 2)
        };
        res = Calculator({
          borrowAmount: amount,
          repayDate: month,
          monthlyComprehensiveFeeRate: rate,
          repayType: 'DEBX',
          isShowTable: true,
          yearRate: YearRate,
          mgmtAmount: 0
        }).calc();
        data.isShowTable = true;
        data.table = res.table;
        _ref = data.table;
        for (k in _ref) {
          v = _ref[k];
          maintenanceFee = (parseInt(Math.round(monthPay * 100), 10) - parseInt(Math.round(v.yuehuankuane * 100))) / 100;
          v.mgmtfee = maintenanceFee.toFixed(2);
          v.yuehuankuane = monthPay;
        }
        return me.renderResult(data);
      },
      updateMonth: function() {
        var dict, idx, me, month, v, _d, _i, _len, _ref;
        me = this;
        month = $('#J_repayTime').val();
        Month = parseInt('0' + month, 10);
        month = Month;
        dict = Dict;
        _ref = Levels.split(' ');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          idx = [v, '_', month].join('');
          if (dict[idx] && !dict[idx].level) {
            _d = dict[idx];
            _d.level = v;
            _d.monthRate = _d.monthlyComprehensiveFeeRate.toFixed(2);
            _d.startRate = _d.guaranteeFee;
          }
        }
        me.updateRate();
        return me.updateLevelList();
      },
      updateRate: function() {
        var idx, month, v;
        month = Month;
        v = UserLevel;
        idx = [v, '_', month].join('');
        v = Dict[idx];
        Rate = v.monthRate;
        StartRate = v.startRate;
        YearRate = v.fixInterest;
        return $('#J_ipt-rate').text(Rate);
      },
      updateLevelList: function() {
        var dict, holder, idx, key, list, me, month, tpl, v, _i, _len, _ref;
        me = this;
        key = 'J_tpl-level-list';
        if (CACHE[key]) {
          tpl = CACHE[key];
        } else {
          tpl = CACHE[key] = Handlebars.compile($('#' + key).html());
        }
        holder = $('#J_creditlevel-list-ul');
        month = Month;
        dict = Dict;
        list = [];
        _ref = Levels.split(' ');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          idx = [v, '_', month].join('');
          if (dict[idx]) {
            list.push(dict[idx]);
          }
        }
        holder.html(tpl({
          list: list
        }));
        return me;
      },
      _renderLabel: function(key) {
        var el, label;
        el = $('#' + key);
        if ($('label.error', el.parent()).length) {
          return label = $('label.error', el.parent());
        }
        return label = $('<label for="' + key + '"></label>').addClass('error hide').appendTo(el.parent());
      },
      validateAmount: function() {
        var el, hideErr, key, label, me, showErr, val;
        me = this;
        key = 'J_borrowAmount';
        el = $('#' + key);
        val = el.val();
        label = me._renderLabel(key);
        showErr = function(msg) {
          label.html(msg).removeClass('hide');
          return el.addClass('error');
        };
        hideErr = function() {
          el.removeClass('error');
          return label.addClass('hide');
        };
        if (val.length < 1) {
          showErr('请输入金额');
          return false;
        }
        if (!/^([1-9]{1}\d*)$/.test(val) || val < 3000 || val > 500000 || (val % 50) !== 0) {
          showErr('金额范围3,000-500,000，且为50的倍数');
          return false;
        }
        hideErr();
        return true;
      },
      validateMonth: function() {
        var el, label, val;
        el = $('#J_repayTime');
        val = el.val();
        label = el.parent().siblings('.noinput-p');
        if (val.length < 1) {
          label.removeClass('hide');
          return false;
        }
        label.addClass('hide');
        return true;
      },
      _bindForm: function() {
        var $amount, $form, $month, me;
        me = this;
        $form = $('#calcForm');
        $amount = $('#J_borrowAmount');
        $month = $('#J_repayTime');
        $form.on('submit', function(e) {
          var _bValid;
          _bValid = true;
          _bValid = _bValid && me.validateAmount();
          _bValid = _bValid && me.validateMonth();
          if (_bValid) {
            me.calc();
          }
          return false;
        });
        return $amount.on('focus', function(e) {
          Form.tipfocus($(this), '金额范围3,000-500,000');
          return $(this).siblings('.error-p').addClass('hide');
        }).on('blur', function(e) {
          me.validateAmount();
          return Form.tipblur($(this));
        });
      },
      _bindCreditLevelSelect: function() {
        var holder, ipt, me, tip, trigger;
        me = this;
        trigger = $('#J_select-creditlevel');
        holder = $('#J_creditlevel-list');
        ipt = $('#J_current-creditlevel');
        tip = $('#J_creditlevel-active');
        trigger.on('click', function(e) {
          holder.toggleClass('hide');
          return false;
        });
        holder.on('mouseenter', 'li', function() {
          var el, lv, x;
          el = $(this);
          if (el.hasClass('title')) {
            return;
          }
          x = el.position().left;
          lv = el.data('level');
          return tip.data('level', lv).css({
            left: x
          });
        });
        return tip.on('click', function() {
          var el, lv;
          el = $(this);
          lv = el.data('level');
          ipt.removeClass(Levels).addClass(lv).text(lv);
          UserLevel = lv;
          me.updateMonth();
          return me.hide(holder);
        });
      },
      _bindDropSelect: function() {
        var isOpen, me;
        me = this;
        isOpen = false;
        $('.J_select_btn').on('click', function() {
          isOpen = true;
          $('.J_popBox').addClass('hide');
          return $(this).parent().find('.J_popBox').removeClass('hide');
        });
        $('.J_popBox').on('mouseenter', 'li', function() {
          return $(this).addClass('selected');
        }).on('mouseleave', 'li', function() {
          return $(this).removeClass('selected');
        }).on('click', 'li', function() {
          var d, el, holder, text;
          el = $(this);
          holder = el.parent().parent();
          d = el.attr('datavalue');
          text = $('span', el).text();
          $('input', holder).val(d);
          me.updateMonth();
          return $('.J_txt', holder).text(text);
        });
        return $(document).on('click', function(e) {
          var target;
          target = $(e.target);
          if (target.parent('.arrow').length) {
            return;
          }
          if (target.parent('.J_select_btn').length) {
            return;
          }
          if (isOpen) {
            return $('.J_popBox').addClass('hide');
          }
        });
      },
      bindEvent: function() {
        var me;
        me = this;
        me._bindDropSelect();
        me._bindCreditLevelSelect();
        return me._bindForm();
      },
      init: function() {
        var me;
        me = this;
        me.bindEvent();
        me.updateMonth();
        return me.renderResult();
      }
    };
    init = function() {
      return Calc.init();
    };
    return module.exports = {
      init: init
    };
  });

}).call(this);
